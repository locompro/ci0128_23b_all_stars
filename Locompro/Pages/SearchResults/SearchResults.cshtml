@page
@using Locompro.Models
@using Locompro.Services
@using Locompro.Common
@model Locompro.Pages.SearchResults.SearchResultsModel

<link rel="stylesheet" href="~/css/MainMenu.css" asp-append-version="true"/>

<div class="container  pt-5"
     style="margin-bottom: 3px;margin-top: -52px;">
    <div class="container">
        <div class="justify-content-center form-actions input-group" style="margin: 0 auto;">
            <div class="search-box form-control pe-4 rounded-pill input-group"
                 style="">
                <div style="width: 100%; padding-right: 20px">
                    <input type="text"
                           value="@Model.ProductName"
                           class="form-control rounded-pill"
                           name="query"
                           placeholder="Ingresar nombre de producto"
                           required="required"
                           style="margin-left: 0px; border: none;"
                           id="searchBox">
                </div>
                <div class="input-group-prepend justify-content-center"
                     style="position: absolute; right: 0; top: 0; bottom: 0; display: flex; align-items: center; margin-right: 10px;">
                    <button class="btn btn-primary ps-2 pe-2 rounded-pill"
                            role="button"
                            type="submit"
                            onclick="performSearchButton()"
                            style="height: 30px; font-size: 12px;"
                            id="searchButton">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
            <button class="search-results-advanced-search-button-initial btn-primary rounded-pill"
                    style="margin-left: 10px; margin-bottom: 0px; "
                    id="advancedSearchButton"
                    onclick="advancedSearchButtonPressed()"
                    type="button">
                Búsqueda avanzada
            </button>
        </div>
        <div>
            <div id="modalContainer" class="justify-content-center">
            </div>
        </div>    
        <div class="card border " style="margin-top: 15px;padding-top: 0px;padding-bottom: 0px;border-radius: 20px;" border="5px solid black;">
            <div style="margin-left: 20px; margin-top: 15px">
                <h2>@Model.ProductName</h2>
                <h6> @Model.ItemsAmount resultados encontrados </h6>
                <div style="margin-right:20px; overflow-y:auto;">
                    <table class="table table-hover" style="cursor:pointer">
                        <thead>
                        <tr>
                            <th>
                                <a asp-page="./SearchResults"
                                   asp-route-sortOrder="@Model.NameSort"
                                   asp-route-sorting=true
                                   asp-route-currentFilter="@Model.CurrentFilter"
                                   asp-route-query=@Model.ProductName
                                   asp-route-province=@Model.ProvinceSelected
                                   asp-route-canton=@Model.CantonSelected
                                   asp-route-minValue=@Model.MinPrice
                                   asp-route-maxValue=@Model.MaxPrice
                                   asp-route-category=@Model.CategorySelected
                                   asp-route-model=@Model.ModelSelected
                                   asp-route-brand="@Model.BrandSelected">
                                    Producto
                                </a>
                            </th>
                            <th scope="col">Precio</th>
                            <th scope="col">Tienda</th>
                            <th scope="col">Provincia</th>
                            <th scope="col">Canton</th>
                            <th scope="col">Descripcion</th>
                            <th scope="col">Ultimo Aporte </th>
                        </tr>
                        </thead>
                        <tbody>
                        @{
                            PaginatedList<Item> items = Model.DisplayItems;
                            foreach (Item item in Model.DisplayItems)
                            {
                                <tr onclick="itemSelected()">
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ProductName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ProductPrice)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ProductStore)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ProvinceLocation)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CantonLocation)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ProductDescription)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.LastSubmissionDate)
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>

                @{
                    var prevDisabled = !Model.DisplayItems.HasPreviousPage ? "disabled" : "";
                    var nextDisabled = !Model.DisplayItems.HasNextPage ? "disabled" : "";
                }

                <div style="margin-bottom: 20px; display: flex; align-items: center;">
                    <a asp-page=""
                       asp-route-query=@Model.ProductName
                       asp-route-province=@Model.ProvinceSelected
                       asp-route-canton=@Model.CantonSelected
                       asp-route-minValue=@Model.MinPrice
                       asp-route-maxValue=@Model.MaxPrice
                       asp-route-category=@Model.CategorySelected
                       asp-route-model=@Model.ModelSelected
                       asp-route-brand="@Model.BrandSelected"
                       asp-route-pageIndex="@(Model.DisplayItems.PageIndex - 1)"
                       asp-route-sortOrder="@Model.NameSort"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="btn btn-primary @prevDisabled"
                       style="margin-bottom:0px">
                        Previo
                    </a>

                    <input type="number"
                           style="bottom: 0; height: 100%; border: 2px solid grey; border-radius: 5px; padding: 7px; width: 60px; margin-left: 10px; margin-right: 10px;"
                           min=1
                           max="@Model.DisplayItems.TotalPages"
                           value="@Model.DisplayItems.PageIndex"
                           onchange="changeIndexPage(this)">

                    <a asp-page=""
                       asp-route-query=@Model.ProductName
                       asp-route-province=@Model.ProvinceSelected
                       asp-route-canton=@Model.CantonSelected
                       asp-route-minValue=@Model.MinPrice
                       asp-route-maxValue=@Model.MaxPrice
                       asp-route-category=@Model.CategorySelected
                       asp-route-model=@Model.ModelSelected
                       asp-route-brand="@Model.BrandSelected"
                       asp-route-pageIndex="@(Model.DisplayItems.PageIndex + 1)"
                       asp-route-sortOrder="@Model.NameSort"
                       asp-route-currentFilter="@Model.CurrentFilter"
                       class="btn btn-primary @nextDisabled">
                        Siguiente
                    </a>
                    <h6 style="margin-left: 10px; margin-bottom:0px"> @Model.DisplayItems.TotalPages paginas de resultados </h6>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        var modalShown = false;

        async function advancedSearchButtonPressed() {
            var button = document.getElementById("advancedSearchButton");
            var modalContainer = document.getElementById("modalContainer");

            // if the modal is currently been shown, close it
            if (modalShown == true) {
                // get the modal

                // erase the contents
                modalContainer.innerHTML = "";
                button.classList.remove("search-results-button-rounded-top");
                button.classList.add("search-results-advanced-search-button-initial");
                button.classList.add("btn-primary");
                button.classList.add("rounded-pill");

                // change state to modal not shown
                modalShown = false;
                return;
            }

            try {
                const response = await fetch("SearchResults?handler=AdvancedSearch");
                if (response.ok) {
                    const modalContent = await response.text();

                    // Append the modal content to the modal container
                    modalContainer.innerHTML = modalContent;
                } else {
                    console.error('Failed to load modal content.');
                }
            } catch (error) {
                console.error('An error occurred:', error);
            }

            modalShown = true;
            modalContainer.classList.remove("modal-advanced-search");
            modalContainer.classList.add("modal-search-results-on-advanced-search");

            button.classList.remove("rounded-pill");
            button.classList.remove("btn-primary");
            button.classList.remove("search-results-advanced-search-button-initial");
            button.classList.add("search-results-button-rounded-top");

        }
    </script>

    <script>
        // activated when province is changed in the dropdown menu
        async function loadProvince(optionSelected) {
            var content = optionSelected.value;

            try {
                // send server side the province selected by client and wait for response
                const response = await fetch("SearchResults?handler=UpdateProvince&province=" + content, {
                    method: 'GET', // use get method
                    headers: {
                        'Accept': 'application/json', // acepting json files
                    },
                });

                if (response.ok) {
                    console.log("ok");
                    // get the cantons that were sent
                    loadCantons(response);
                } else {
                    console.log("not ok");
                }
            } catch (error) {
                console.log("Error");
            }
        }

        // get the cantons sent by the server side
        async function loadCantons(response) {
            try {
                // wait for cantons json file to be received
                const data = await response.json();

                // Clear existing options in the optgroup
                const optgroup = document.getElementById('cantonDropdown');
                optgroup.innerHTML = '';

                // Populate with new options based on fetched data
                data.forEach(function (canton) {
                    const option = document.createElement('option');
                    option.textContent = canton.Name;
                    optgroup.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading cantons:', error);
            }
        }
    </script>

    <script>
        const invalidSimpleSearch = "/SearchResults/SearchResults?query=";
             
        const invalidAdvancedSearch = "/SearchResults/SearchResults?query="
             + "&province=Ninguno"
             + "&canton=Ninguno"
             + "&minValue=0"
             + "&maxValue=0"
             + "&category=Ninguno"
             + "&model="
             + "&brand=";
            
        function performSearchButton() {
            // if advanced search is not open it is normal search
            var redirect = "/SearchResults/SearchResults?query=";
             
            var searchValue = document.getElementById("searchBox").value.valueOf() ;
             
             
            if (!modalShown) {
                 // get value
                 redirect += searchValue;   
                 
                if (redirect.localeCompare(invalidSimpleSearch) === 0) { 
                    return;
                }
            } else {
                 var provinceValue = document.getElementById("provinceDropdown").value;
                 var cantonValue = document.getElementById("cantonDropdown").value;
                 var minValue = 0/*document.getElementById("minValue").value*/;
                 var maxValue = 0/*document.getElementById("maxValue").value*/;
                 var categoryValue = document.getElementById("categoryDropdown").value;
            
                 try {
                     var modelValue = document.getElementById("modelInput").value;
                     var brandValue = document.getElementById("brandInput").value;
                 } catch (error) {
                 }
            
                redirect += searchValue
                    + "&province=" + provinceValue
                    + "&canton=" + cantonValue
                    + "&minValue=" + minValue
                    + "&maxValue=" + maxValue
                    + "&category=" + categoryValue
                    + "&model=" + modelValue
                    + "&brand=" + brandValue;
                 
                if (redirect.localeCompare(invalidAdvancedSearch) === 0) {
                    return;
                }
            }
            
            window.location.href = redirect;
        }
    </script>

    <script>
        function itemSelected() {
            window.location.href = "/SearchResults/SearchResults?query=buttonClicked!";
        }
    </script>

    <script>
        function changeIndexPage(field) {
            if (field.value > @Model.DisplayItems.TotalPages) {
                field.value = @Model.DisplayItems.TotalPages;
            }

            if (field.value < 1) {
                field.value = 1;
            }
            var provinceForEmptyCheck = "@Model.ProvinceSelected";

            console.log(provinceForEmptyCheck);
            if (provinceForEmptyCheck.length === 0) {
                // redirect to search results page
                window.location.href = "/SearchResults/SearchResults?query=" + "@Model.ProductName" +
                    "&pageIndex=" + field.value;
            } else {
                // redirect to search results page
                window.location.href = "/SearchResults/SearchResults?query=" + "@Model.ProductName" +
                    "&province=" + "@Model.ProvinceSelected" +
                    "&canton=" + "@Model.CantonSelected" +
                    "&minValue=" + @Model.MinPrice +
                    "&maxValue=" + @Model.MaxPrice +
                    "&category=" + "@Model.CategorySelected" +
                    "&model=" + "@Model.ModelSelected" +
                    "$brand=" + "@Model.BrandSelected" +
                    "&pageIndex=" + field.value;
            }

        }
    </script>

    <script>
        // makes sure the min field is less than the max field
        function validatePriceInput(button) {
            // get the fields
            var minButton = document.getElementById("minValue");
            var maxButton = document.getElementById("maxValue");

            // if the field is the min field
            if (button === minButton) {
                // check if the min field is greater or equal than the max field
                if (parseInt(minButton.value, 10) >= parseInt(maxButton.value, 10)) {
                    // if no then make it less than the max field
                    minButton.value = parseInt(maxButton.value, 10) - 1;
                    // ensure the value is not negative
                    if (minButton.value < 0) {
                        minButton.value = 0;
                    }
                }
            }

            // field is the max field
            if (button === maxButton) {
                // if the value is less or equal than the min field
                if (parseInt(minButton.value, 10) >= parseInt(maxButton.value, 10)) {
                    // make it greater than the min field
                    maxButton.value = parseInt(minButton.value, 10) + 1;
                }
            }
        }
    </script>

    <script>
        // script to search on enter press
        document.getElementById("searchBox")
            .addEventListener("keyup", function (event) {
                event.preventDefault();
                if (event.keyCode === 13) {
                    document.getElementById("searchButton").click();
                }
            });
    </script>
}