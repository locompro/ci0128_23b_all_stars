@page
@model Locompro.Pages.IndexModel

<!-- get the css file with main menu formats -->
<link rel="stylesheet" href="~/css/MainMenu.css" asp-append-version="true" />

<h1 class="d-flex justify-content-center" style="padding-top: 0px;margin-top: 180px;margin-bottom: 55px;font-size: 75px;">LoCoMPro</h1>

<div class="container  pt-5"
     style="padding-left: 0px;margin-bottom: 3px;margin-top: -42px; margin-left: 10px; margin-right: 10px">
    <div class="row justify-content-center">
        <div class="container">
            <div class="justify-content-center form-actions input-group" style="max-width: 800px; margin: 0 auto;">
                <div class="search-box form-control pe-4 rounded-pill input-group"
                     style="">
                    <div style="width: 100%; padding-right: 20px">
                        <input type="text"
                               class="form-control rounded-pill"
                               name="query"
                               placeholder="Ingresar nombre de producto"
                               required="required"
                               style="margin-left: 0px; border: none;"
                               id="searchBox">
                    </div>
                    <div class="input-group-prepend justify-content-center"
                         style="position: absolute; right: 0; top: 0; bottom: 0; display: flex; align-items: center; margin-right: 10px;">
                        <button class="btn btn-primary ps-2 pe-2 rounded-pill"
                                role="button"
                                type="submit"
                                onclick="performSearchButton()"
                                style="height: 30px; font-size: 12px;"
                                id="searchButton">
                            <i class="fa fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        // variable to store if the modal has been shown
        var modalShown = false;

        // event listener for the advanced search button
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("advancedSearchButton").addEventListener("click", async function () {
                // get button for advanced search button
                button = document.getElementById("advancedSearchButton");

                // if the modal is currently been shown, close it
                if (modalShown == true) {
                    // get the modal
                    var modal = document.getElementById("modalContainer");
                    // erase the contents
                    modal.innerHTML = "";

                    // reset the button
                    button.classList.remove("button-rounded-top");
                    button.classList.add("index-advanced-search-button");
                    
                    modalContainer.classList.remove("index-modal-advanced-search");
                    modalContainer.classList.add("advanced-search-modal-default");
                    
                    // change state to modal not shown
                    modalShown = false;
                    return;
                }

                try {
                    const response = await fetch("Index?handler=AdvancedSearch");
                    if (response.ok) {
                        const modalContent = await response.text();

                        // Append the modal content to the modal container
                        const modalContainer = document.getElementById("modalContainer");
                        modalContainer.innerHTML = modalContent;
                    } else {
                        console.error('Failed to load modal content.');
                    }
                } catch (error) {
                    console.error('An error occurred:', error);
                }

                modalContainer.classList.add("index-modal-advanced-search");
                modalContainer.classList.remove("advanced-search-modal-default");

                // change the button style
                button.classList.remove("index-advanced-search-button-initial");
                button.classList.remove("index-advanced-search-button");
                button.classList.add("button-rounded-top");

                // if the modal has been displayed, then store the state
                modalShown = true;
            });
        });
    </script>

    <script>
        // activated when province is changed in the dropdown menu
        async function loadProvince(optionSelected) {
            var content = optionSelected.value;

            try {
                // send server side the province selected by client and wait for response
                const response = await fetch("Index?handler=UpdateProvince&province=" + content, {
                    method: 'GET', // use get method
                    headers: {
                        'Accept': 'application/json', // acepting json files
                    },
                });

                if (response.ok) {
                    console.log("ok");
                    // get the cantons that were sent
                    loadCantons(response);
                } else {
                    console.log("not ok");
                }
            } catch (error) {
                console.log("Error");
            }
        }

        // get the cantons sent by the server side
        async function loadCantons(response) {
            try {
                // wait for cantons json file to be received
                const data = await response.json();

                // Clear existing options in the optgroup
                const optgroup = document.getElementById('cantonDropdown');
                optgroup.innerHTML = '';

                // Populate with new options based on fetched data
                data.forEach(function (canton) {
                    const option = document.createElement('option');
                    option.textContent = canton.Name;
                    optgroup.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading cantons:', error);
            }
        }
    </script>

    <script>
        const invalidSimpleSearch = "/SearchResults/SearchResults?query=";
        
        const invalidAdvancedSearch = "/SearchResults/SearchResults?query="
            + "&province=Ninguno"
            + "&canton=Ninguno"
            + "&minValue=0"
            + "&maxValue=0"
            + "&category=Ninguno"
            + "&model="
            + "&brand=";
    
        function performSearchButton() {
            // if advanced search is not open it is normal search
            var redirect = "/SearchResults/SearchResults?query=";
            
            var searchValue = document.getElementById("searchBox").value.valueOf() ;
            
            if (!modalShown) {
                // get value
                redirect += searchValue;   
                
                if (redirect.localeCompare(invalidSimpleSearch) === 0) {
                    return;
                }
            } else {
                var provinceValue = document.getElementById("provinceDropdown").value;
                var cantonValue = document.getElementById("cantonDropdown").value;
                var minValue = /*document.getElementById("minValue").value*/ 0;
                var maxValue = /*document.getElementById("maxValue").value*/ 0;
                var categoryValue = document.getElementById("categoryDropdown").value;

                try {
                    var modelValue = document.getElementById("modelInput").value;
                    var brandValue = document.getElementById("brandInput").value;
                } catch (error) {
                }

               redirect += searchValue
                    + "&province=" + provinceValue
                    + "&canton=" + cantonValue
                    + "&minValue=" + minValue
                    + "&maxValue=" + maxValue
                    + "&category=" + categoryValue
                    + "&model=" + modelValue
                    + "&brand=" + brandValue;
                
               if (redirect.localeCompare(invalidAdvancedSearch) === 0) {
                    return;
               }
            }

            window.location.href = redirect;

            /*
            const dataToSend = {
                query: searchValue,
                province: provinceValue,
                canton: cantonValue,
                minValue: minValue,
                maxValue: maxValue,
                category: categoryValue,
                model: modelValue
            };

            var url = window.location.pathname;
            var handler = "?handler=SendSearchParameters";
            var location = url + handler;

            $.ajax({
                contentType: 'application/json',
                type: 'POST',
                url: location,
                data: JSON.stringify(dataToSend),
                headers: {
                    "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                },
                success: function () {
                    window.location.href = "/SearchResults/SearchResults";
                },
                error: function () {
                    alert("AJAX Request Failed, another failure...");
                }
            });
            */
        }
    </script>
    <script>
        // makes sure the min field is less than the max field
        function validatePriceInput(button) {
            // get the fields
            var minButton = document.getElementById("minValue");
            var maxButton = document.getElementById("maxValue");

            // if the field is the min field
            if (button === minButton) {
                // check if the min field is greater or equal than the max field
                if (parseInt(minButton.value, 10) >= parseInt(maxButton.value, 10)) {
                    // if no then make it less than the max field
                    minButton.value = parseInt(maxButton.value, 10) - 1;
                    // ensure the value is not negative
                    if (minButton.value < 0) {
                        minButton.value = 0;
                    }
                }
            }

            // field is the max field
            if (button === maxButton) {
                // if the value is less or equal than the min field
                if (parseInt(minButton.value, 10) >= parseInt(maxButton.value, 10)) {
                    // make it greater than the min field
                    maxButton.value = parseInt(minButton.value, 10) + 1;
                }
            }
        }
    </script>

    <script>
        // script to search on enter press
        document.getElementById("searchBox")
            .addEventListener("keyup", function (event) {
                event.preventDefault();
                if (event.keyCode === 13) {
                    document.getElementById("searchButton").click();
                }
            });
    </script>
}

